<?php

/**
 * @file
 */

/**
 * Helper function to generate the configuration array used to server
 * settings of SLiMS.
 */
function slims_conf() {
  $_p = 'slims';
  $conf = array(
    'server_url' => variable_get($_p . '_server_url', 'http://localhost/slims/'),
    'server_title' => variable_get($_p . '_server_title', 'Senayan'),
    'server_subtitle' => variable_get($_p . '_server_subtitle', 'Open Source Library Management System'),
    'image_thumb_size' => variable_get($_p . '_image_thumb_size', '42'),
    'image_detail_size' => variable_get($_p . '_image_detail_size', '200'),
    'image_opt' => variable_get($_p . '_image_opt', 0),
    'image_empty_opt' => variable_get($_p . '_image_empty_opt', 0),
    'search_input_size' => variable_get($_p . '_search_input_size', ''),
    'list_page' => variable_get($_p . '_list_page', 1),
    'list_key' => variable_get($_p . '_list_key', ''),
    'list_limit' => variable_get($_p . '_list_limit', 3),
    'list_more_key' => variable_get($_p . '_list_more_key', 1),
  );
  return $conf;
}

/**
 * Helper function to generate url query
 */
function slims_query($type = 'page') {
  if ($type == 'page') {
    $query = array('p' => 'show_detail',
      'inXML' => 'true',
      'id' => '',
    );
  } else {
    $query = array('resultXML' => 'true',
      'search' => 'Search',
      'gmd' => 0,
      'colltype' => 0,
      'location' => 0,
      'keywords' => '',
      'title' => '',
      'author' => '',
      'subject' => '',
      'isbn' => '',
      'page' => '',
      'detail' => 1,
    );    
  }
  return $query;
}

/**
 * Implements of hook_menu().
 */
function slims_menu() {
  $slims_conf = slims_conf();
  $items['admin/config/slims'] = array(
    'title' => 'SLiMS',
    'description' => 'Configure SLiMS',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer slims'),
    'position' => 'right',
    'weight' => -30,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/slims/server'] = array(
    'title' => 'SLiMS server settings',
    'description' => 'Configure the settings of SLiMS server.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slims_server_settings'),
    'access arguments' => array('administer slims'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'slims.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/slims/picture'] = array(
    'title' => 'SLiMS picture settings',
    'description' => 'Configure how to display picture from SLiMS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slims_picture_settings'),
    'access arguments' => array('administer slims'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'slims.admin.inc',
    'weight' => 1,
  );
  $items['admin/config/slims/widget'] = array(
    'title' => 'SLiMS widget settings',
    'description' => 'Configure the widgets of SLiMS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slims_widget_settings'),
    'access arguments' => array('administer slims'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'slims.admin.inc',
    'weight' => 2,
  );
  $items['admin/config/slims/importpic'] = array(
    'title' => 'SLiMS import pictures tool',
    'description' => 'Import picture from SLiMS server to Drupal files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slims_pictures_tool'),
    'access arguments' => array('administer slims'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'slims.admin.inc',
    'weight' => 3,
  );
  $items['slims/search'] = array(
    'title' => $slims_conf['server_title'],
    'page callback' => 'slims_search',
    'page arguments' => array(2),
    'access arguments' => array('access slims'),
    'access callback' => true,
    //~ 'type' => MENU_CALLBACK,
    'file' => 'slims.content.inc',
  );
  $items['slims/detail'] = array(
    'page callback' => 'slims_item_details',
    'page arguments' => array(2),
    'access arguments' => array('access slims'),
    'type' => MENU_CALLBACK,
    'file' => 'slims.content.inc',
  );
  return $items;
}

/**
 * Implements of hook_permission().
 */
function slims_permission() {
  return array(
    'administer slims' => array(
      'title' => t('Administer SLiMS'),
    ),
    'access slims' => array(
      'title' => t('Access SLiMS bibliography detail item'),
    ),
    'search slims' => array(
      'title' => t('Search on SLiMS bibliography'),
    ),
  );
}

/**
 * Implements of hook_block().
 */
function slims_block() {
}

/**
 * Implements of hook_theme().
 */
function slims_theme($existing, $type, $theme, $path) {
  $themes = array();
  
  $themes['slims_single_item'] = array(
    'variables' => array(
      'items' => NULL,
    ),
    'template' => 'slims-single-item',
  );

  $themes['slims_image64'] = array(
    'variables' => array(
      'data' => NULL,
      'alt' => NULL,
      'title' => NULL,
    )
  );

  $themes['slims_div_items'] = array(
    'variables' => array(
      'items' => NULL,
      'title' => NULL,
    )
  );

  return $themes;
}

/**
 * Implements of hook_block_info()
 */
function slims_block_info() {
  $blocks = array();
  
  $blocks['form'] = array(
    'info' => t('SLiMS search form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['form']['properties']['administrative'] = TRUE;
  
  $blocks['list'] = array(
    'info' => t('SLiMS items'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['list']['properties']['administrative'] = TRUE;
  
  return $blocks;
}

/**
 * Implements of hook_block_view()
 */
function slims_block_view($delta = '') {
  if ($delta == 'form') {
    if (user_access('search slims')) {
      $block['subject'] = t('SLiMS Simple Search');
      $block['content'] = drupal_get_form('slims_simple_search_block');
    }
  }
  else if ($delta == 'list') {
    $block['subject'] = t('SLiMS Items');
    $block['content'] = slims_list_block();
  }
  return $block;
}

/**
 * SLiMS Simple Search block's content
 */
function slims_simple_search_block($form, &$form_state) {
  $slims_conf = slims_conf();
  
  $path = explode('/', request_path());
  $default_value = '';
  if (count($path) == 3 AND $path[0] == 'slims' AND $path[1] == 'search')
    $default_value = $path[2];
  
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Keywords'),
    '#default_value' => $default_value,
  );
  if (trim($slims_conf['search_input_size']) != 0 AND trim($slims_conf['search_input_size']) != '') {
    $form['keywords']['#size'] = $slims_conf['search_input_size'];
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );
  return $form;
}

/**
 * Form submission for slims_simple_search_block()
 */
function slims_simple_search_block_submit($form, &$form_state) {
  if (trim($form_state['values']['keywords']) != '')
    $form_state['redirect'] = 'slims/search/' . trim($form_state['values']['keywords']);
}

/**
 * SLiMS Items block's content
 */
function slims_list_block() {
  $slims_conf = slims_conf();
  $page = ($slims_conf['list_page'] - 1 < 0) ? 0 : $slims_conf['list_page'] - 1;
  $key = $slims_conf['list_key'];
  $limit = is_numeric($slims_conf['list_limit']) ? $slims_conf['list_limit'] : 3;

  $data = _slims_receiver_items($page, $key);

  $items = array();
  $l = 0;
  foreach ($data['items'] as $item) {
    $l++;
    if ($l > $limit)
      continue;
    $items[] = array(
      'data' => array(
        '#theme' => 'slims_single_item',
        '#items' => $item,
      ),
      'class' => array('item-' . $item['id']),
    );
  }
  
  if (!empty($items)) {
    $render_array['slims_list'] = array(
      '#theme' => 'slims_div_items',
      '#items' => $items,
      '#pre_render' => array('slims_item_list_child_render'),
    );
    
    $render_array['slims_full'] = array(
      '#theme' => 'more_link',
      '#url' => ($slims_conf['list_more_key'] == 1 AND !empty($slims_conf['list_key'])) ?
        'slims/search/' . $slims_conf['list_key'] : 'slims/search',
      '#title' => t('more'),
    );
  }

  return $render_array;
}

/**
 * Theme for display list of items with div tag
 */
function theme_slims_div_items($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  
  $output = '';
  $num_items = count($items);
  
  if (isset($title) && !empty($title)) {
    $output .= '<h3>' . $variables['title'] . '</h3>';
  }
  $i = 0;
  foreach($items as $item) {
    $attributes = array();
    $attributes['class'][] = 'slims-item';
    $i++;
    if ($i == 1) {
      $attributes['class'][] = 'first';
    }
    if ($i == $num_items) {
      $attributes['class'][] = 'last';
    }
    $attributes['class'][] = ($i % 2 == 1) ? 'odd' : 'even';
    $output .= '<div' . drupal_attributes($attributes) . '>' . $item['data'] . "</div>\n";
  }
  return $output;
}

/**
 * Theme for display image with base64 encoding string
 */
function theme_slims_image64($variables) {
  $variables['src'] = $variables['data'];
  unset($variables['data']);
  $output = '<img' . drupal_attributes($variables) . ' />';

  return $output;
}

/**
 * Render each element of items
 */
function slims_item_list_child_render($elements) {
	foreach (array_keys($elements['#items']) AS $key) {
		// Take the renderable array that we set in
		// single_blog_block_view() and render it into the string
		// that theme_item_list() expects.
		if (is_array($elements['#items'][$key]['data'])) {
			$elements['#items'][$key]['data'] = 
			drupal_render($elements['#items'][$key]['data']);
		}
	}
	return $elements;
}

/**
 * Render each row of item's detail
 */
function slims_row_detail($elements) {
  $slims_conf = slims_conf();
  $_p = 'slims';
  $rows = $elements['#rows'];
  
  $rows['edition'][0]['width'] = '200px';

  $authors = $rows['authors'][1]['data'];
  $_authors = array();
  foreach ($authors as $author) {
	//~ $author[0] = l($author[0], 'slims/search/' . str_replace(' ', '+', $author[0]));
	$author[0] = l($author[0], 'slims/search/' . $author[0]);
	$_authors[] = implode(' - ', $author);
  }
  $rows['authors'][1]['data'] = theme('item_list', array('items' => $_authors));
  
  $subjects = $rows['subjects'][1]['data'];
  $_subjects = array();
  foreach ($subjects as $subject) {
    $_subjects[] = l($subject, 'slims/search/' . $subject);
  }
  $rows['subjects'][1]['data'] = theme('item_list', array('items' => $_subjects));
  
  $copies = $rows['availability'][1]['data'];
  $_copies = array();
  foreach ($copies as $copy) {
    $_copies[] = array(
      array('data' => $copy['items']),
      array('data' => $copy['location']),
    );
  }
  $rows['availability'][1]['data'] = theme('table', array('rows' => $_copies));
  
  $picname = $rows['image'][1]['data'];

  $display_picture = TRUE;
  $base64 = FALSE;
  if (empty($picname)) {
    if ($slims_conf['image_empty_opt'] == 1) {
      $picpath = $slims_conf['server_url'] . 'images/default/image.png';
    }
    else if ($slims_conf['image_empty_opt'] == 2) {
      $picpath = $slims_conf['server_url'] . 'images/default/image.png';
      $filetype = pathinfo('image.png', PATHINFO_EXTENSION);
      $image_data = file_get_contents($picpath);
      $picpath = 'data:image/' . $filetype . ';base64,' . base64_encode($image_data);
      $base64 = TRUE;
    }
    else if ($slims_conf['image_empty_opt'] == 3) {
      $picpath = drupal_get_path('module', 'slims') . '/default/empty.png';
      $picpath = image_style_path('slims-detail', $path);
    }
    else {
      $display_picture = FALSE;
    }
  }
  else {
    if ($slims_conf['image_opt'] == 1) {
      $base64 = TRUE;
      $filetype = pathinfo($picname, PATHINFO_EXTENSION);
      $image_data = file_get_contents($slims_conf['server_url']
        . 'lib/phpthumb/phpThumb.php?src=../../images/docs/'
        . $picname
        . '&'
        . http_build_query(_slims_query_image_detail())
      );
      $picpath = 'data:image/' . $filetype . ';base64,' . base64_encode($image_data);
    }
    else {
      $picpath = $slims_conf['server_url']
        . 'lib/phpthumb/phpThumb.php?src=../../images/docs/'
        . $picname
        . '&'
        . http_build_query(_slims_query_image_detail());
    } 
  }
  if ($display_picture) {
    $rows['image'][1]['data'] = theme(($base64) ? 'slims_image64' : 'image', array(
      ($base64 ? 'data' : 'path') => $picpath,
      'alt' => empty($picname) ? t('Unknown') : $picname,
      'title' => empty($picname) ? t('Unknown') : $picname,
      'attributes' => array('class' => 'slims-detail-img', 'id' => 'slims-detail-img'),
    ));
  }
  else {
    $rows['image'][1]['data'] = '';
  }

  $elements['#rows'] = $rows;
  return $elements;
}

/**
 * Proprocess of slims_single_item theme
 */
function template_preprocess_slims_single_item(&$variables) {
  $slims_conf = slims_conf();
  $_p = 'slims';
  
  $item = $variables['items'];
  
  // Create a renderable array for the title.
  //~ $variables['title'] = array(
    //~ '#type' => 'link',
    //~ '#title' => $node->title,
    //~ '#href' => 'node/' . $node->nid,
  //~ );
  
  $variables['title'] = $item['title'];
  $variables['authors'] = $item['authors'];
  
  $picname = $item['image'];

  $display_picture = TRUE;
  $base64 = FALSE;
  if (empty($picname)) {
    if ($slims_conf['image_empty_opt'] == 1) {
      $picpath = $slims_conf['server_url'] . 'images/default/image.png';
    }
    else if ($slims_conf['image_empty_opt'] == 2) {
      $picpath = $slims_conf['server_url'] . 'images/default/image.png';
      $filetype = pathinfo('image.png', PATHINFO_EXTENSION);
      $image_data = file_get_contents($picpath);
      $picpath = 'data:image/' . $filetype . ';base64,' . base64_encode($image_data);
      $base64 = TRUE;
    }
    else if ($slims_conf['image_empty_opt'] == 3) {
      $path = drupal_get_path('module', 'slims') . '/default/empty.png';
      $picpath = image_style_path('slims-thumb', $path);
    }
    else {
      $display_picture = FALSE;
    }
  }
  else {
    if ($slims_conf['image_opt'] == 1) {
      $base64 = TRUE;
      $filetype = pathinfo($picname, PATHINFO_EXTENSION);
      $image_data = file_get_contents($slims_conf['server_url']
        . 'lib/phpthumb/phpThumb.php?src=../../images/docs/'
        . $picname
        . '&'
        . http_build_query(_slims_query_image_thumb())
      );
      $picpath = 'data:image/' . $filetype . ';base64,' . base64_encode($image_data);
    }
    else {
      $picpath = $slims_conf['server_url']
        . 'lib/phpthumb/phpThumb.php?src=../../images/docs/'
        . $picname
        . '&'
        . http_build_query(_slims_query_image_thumb());
    } 
  }
  if ($display_picture) {
    $variables['image'] = theme(($base64) ? 'slims_image64' : 'image', array(
      ($base64 ? 'data' : 'path') => $picpath,
      'alt' => empty($picname) ? t('Unknown') : $picname,
      'title' => empty($picname) ? t('Unknown') : $picname,
      'attributes' => array('class' => 'slims-detail-img', 'id' => 'slims-detail-' . $item['id']),
    ));
  }
  else {
    $variables['image'] = '';
  }
}

/**
 * Pager modification function for non-SQL data
 */
function pager_array_splice($data, $limit = 9, $element = 0) {
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : '';

  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);

  // We calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = count($data);
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
  return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}

/**
 * Receiver data from XML for list of items
 */
function _slims_receiver_items($page = 0, $keyword = '') {
  $slims_url = variable_get('slims_server_url', 'http://localhost/meranti/');
  $prexmlquery = _slims_query_xml_items($page + 1, implode('+', explode(' ', $keyword)));
  $obj = @simplexml_load_file($slims_url . 'index.php?' . http_build_query($prexmlquery));
  $items = array();
  $nums = 0;
  $total = 0;
  if ($obj) {
    $result = $obj->children('slims', TRUE)->resultInfo;
    if ($result->modsResultShowed > 0) {
      foreach ($obj->mods as $item)
      {
        $array = array();
        foreach ($item->name as $names) {
          $array[] = $names->namePart;
        }
        $items[] = array(
          'id' => $item['ID'],
          'title' => l($item->titleInfo->title . $item->titleInfo->subTitle, 'slims/detail/' . $item['ID']),
          'authors' => t('Author(s): @authors', array('@authors' => implode(' - ', $array))),
          'image' => $item->children('slims', TRUE)->image,
        );
      }
    }
    $total = $result->modsResultNum;
    $nums = $result->modsResultShowed;
  }
  
  return array('total' => $total,
    'nums' => $nums,
    'items' => $items,
    //~ 'log' => http_build_query($prexmlquery)
  );
}

/**
 * Receiver data from XML for item's detail
 */
function _slims_receiver_details($id = '') {
  $slims_url = variable_get('slims_server_url', 'http://slims.web.id/demo/');
  $prexmldetailquery = _slims_query_xml_detail($id);
  $obj = simplexml_load_file($slims_url . 'index.php?' . http_build_query($prexmldetailquery));
  $items = array();
  if ($obj) {
    $mods = $obj->mods;
    
    $authors = array();
    if (isset($mods->name)) {
      foreach ($mods->name as $n) {
        $authors[] = array($n->namePart, $n['type'], $n->role->roleTerm);
      }
    }
    
    $subjects = array();
    if (isset($mods->subject)) {
      foreach ($mods->subject as $s) {
        $subjects[] = $s->topic;
      }
    }
    
    $copies = array();
    if (isset($mods->location->holdingSimple->copyInformation)) {
      foreach (@$mods->location->holdingSimple->copyInformation as $c) {
        $copies[] = array(
          'items' => $c->numerationAndChronology,
          'location' => $c->sublocation
        );
      }
    }
    
    $items = array(
      'title' => array(
        'key' => t('Title'),
        'val' => $mods->titleInfo->title . $mods->titleInfo->subTitle,
      ),
      'edition' => array(
        'key' => t('Edition'),
        'val' => @$mods->originInfo->edition,
      ),
      'callnumber' => array(
        'key' => t('Call Number'),
        'val' => @$mods->location->shelfLocator,
      ),
      'isbn-issn' => array(
        'key' => t('ISBN/ISSN'),
        'val' => @$mods->identifier,
      ),
      'authors' => array(
        'key' => t('Author(s)'),
        'val' => @$authors,
      ),
      'subjects' => array(
        'key' => t('Subject(s)'),
        'val' => @$subjects,
      ),
      'classification' => array(
        'key' => t('Classification'),
        'val' => @$mods->classification,
      ),
      'series' => array(
        'key' => t('Series'),
        'val' => @$mods->relatedItem->titleInfo->title,
      ),
      'gmd' => array(
        'key' => t('GMD'),
        'val' => @$mods->physicalDescription->form,
      ),
      'language' => array(
        'key' => t('Language'),
        'val' => @$mods->language->languageTerm[1],
      ),
      'publisher' => array(
        'key' => t('Publisher'),
        'val' => @$mods->originInfo->publisher,
      ),
      'publish_year' => array(
        'key' => t('Publishing Year'),
        'val' => @$mods->originInfo->dateIssued,
      ),
      'publish_place' => array(
        'key' => t('Publishing Place'),
        'val' => @$mods->originInfo->place,
      ),
      'collation' => array(
        'key' => t('Collation'),
        'val' => @$mods->physicalDescription->extent,
      ),
      'abstract' => array(
        'key' => t('Abstract/Notes'),
        'val' => @$mods->note,
      ),
      'image' => array(
        'key' => t('Picture'),
        'val' => @$mods->children('slims', TRUE)->image,
      ),
      'availability' => array(
        'key' => t('Items'),
        'val' => @$copies,
      ),
    );

  }
  
  return array('items' => $items);
}

/**
 * Array of image detail query
 */
function _slims_query_image_detail() {
  return array('w' => variable_get('slims_image_detail_size', 200));
}

/**
 * Array of image thumb query
 */
function _slims_query_image_thumb() {
  return array('w' => variable_get('slims_image_thumb_size', 42));
}

/**
 * Array of XML item's detail query
 */
function _slims_query_xml_detail($id) {
  return array('p' => 'show_detail',
    'inXML' => 'true',
    'id' => $id,
  );
}

/**
 * Array of XML list of items query
 */
function _slims_query_xml_items($page = 0, $keyword = '') {
  return array('resultXML' => 'true',
    'search' => 'Search',
    'gmd' => 0,
    'colltype' => 0,
    'location' => 0,
    'keywords' => $keyword,
    'title' => '',
    'author' => '',
    'subject' => '',
    'isbn' => '',
    'page' => $page,
    'detail' => 1,
  );
}
